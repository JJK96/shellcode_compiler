CC = {{CC}}
LD = {{LD}}
EXE_PAYLOAD_CFLAGS = -fPIC -mconsole -Os
#-D_UCRT: Do not use mingw's version of the C runtime, but use Microsoft's implementation.
#-DWINBASEAPI: Do not import from DLLs, but statically
BIN_PAYLOAD_CFLAGS = \
 -Os\
 -fPIC\
 -nostdlib\
 -nostartfiles\
 -ffreestanding\
 -fno-asynchronous-unwind-tables\
 -fno-ident\
 -Wl,--no-seh\
 -fno-optimize-sibling-calls\
 -ffunction-sections\
 -D_UCRT= \
 -DWINBASEAPI=
LD_FLAGS = \
	--image-base=0 \
	--gc-sections # Included even though it doesn't seem to work

loader.exe: loader.c
	${CC} $^ -o $@

loader.c: loader.j2.c payload.bin
	piclin template $< PAYLOAD=@payload.bin > $@

tmp.exe: linker.ld payload.o AdjustStack.o winlib.o
	${LD} -T $^ -o $@ ${LD_FLAGS}

payload.bin: tmp.exe
	x86_64-w64-mingw32-objcopy -O binary -j.text $< $@

{% if language == 'c' %}
# Compile payload C code to object file
payload.o: payload.c
	${CC} -c $^ -o $@ ${BIN_PAYLOAD_CFLAGS}
{% elif language == 'rust' %}
# Compile payload Rust code to object file
payload.o: payload.rs
	RUSTFLAGS="-C relocation-model=pic -C linker=fake_linker.sh" cargo build --release --target x86_64-pc-windows-gnu
{% elif language == 'zig' %}
# Compile payload Zig code to object file
payload.o: payload.zig
	zig build -Dtarget=x86_64-windows -p . -Doptimize=ReleaseSmall 
{% endif %}

# Determine undefined references based on linking errors
functions.txt: linker.ld payload.o AdjustStack.o
	${LD} -T $^ -o /dev/null ${LD_FLAGS} 2>&1 | awk -F\` '/undefined reference/{print substr($$(NF), 1, length($$(NF))-1)}' > $@

winlib.c: winlib.j2.c functions.txt
	piclin winlib $^ > $@

winlib.o: winlib.c
	${CC} -c $^ -o $@ ${BIN_PAYLOAD_CFLAGS}

AdjustStack.o: AdjustStack.s
	${CC} -c $^ -o $@ ${BIN_PAYLOAD_CFLAGS}

exe: payload.exe

{% if language == 'c' %}
payload.exe: winlib.o payload.o
	${CC} $^ -o $@ ${EXE_PAYLOAD_CFLAGS}
{% elif language == 'rust' %}
payload.exe: payload.rs
	cargo build --release --target x86_64-pc-windows-gnu
	cp target/x86_64-pc-windows-gnu/release/payload.exe ./
{% endif %}

